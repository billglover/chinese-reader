// Code generated by protoc-gen-go. DO NOT EDIT.
// source: token-manager.proto

/*
Package token_manager is a generated protocol buffer package.

It is generated from these files:
	token-manager.proto

It has these top-level messages:
	TokenRequest
	Token
	Validity
*/
package token_manager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TokenRequest struct {
}

func (m *TokenRequest) Reset()                    { *m = TokenRequest{} }
func (m *TokenRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()               {}
func (*TokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Token struct {
	Id        string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Created   *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	Remaining int32                      `protobuf:"varint,3,opt,name=remaining" json:"remaining,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Token) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Token) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Token) GetRemaining() int32 {
	if m != nil {
		return m.Remaining
	}
	return 0
}

type Validity struct {
	Valid bool   `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Token *Token `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *Validity) Reset()                    { *m = Validity{} }
func (m *Validity) String() string            { return proto.CompactTextString(m) }
func (*Validity) ProtoMessage()               {}
func (*Validity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Validity) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Validity) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func init() {
	proto.RegisterType((*TokenRequest)(nil), "token_manager.TokenRequest")
	proto.RegisterType((*Token)(nil), "token_manager.Token")
	proto.RegisterType((*Validity)(nil), "token_manager.Validity")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TokenManager service

type TokenManagerClient interface {
	CreateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*Token, error)
	ValidateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Validity, error)
	DecrementToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
}

type tokenManagerClient struct {
	cc *grpc.ClientConn
}

func NewTokenManagerClient(cc *grpc.ClientConn) TokenManagerClient {
	return &tokenManagerClient{cc}
}

func (c *tokenManagerClient) CreateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/token_manager.TokenManager/CreateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenManagerClient) ValidateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Validity, error) {
	out := new(Validity)
	err := grpc.Invoke(ctx, "/token_manager.TokenManager/ValidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenManagerClient) DecrementToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/token_manager.TokenManager/DecrementToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TokenManager service

type TokenManagerServer interface {
	CreateToken(context.Context, *TokenRequest) (*Token, error)
	ValidateToken(context.Context, *Token) (*Validity, error)
	DecrementToken(context.Context, *Token) (*Token, error)
}

func RegisterTokenManagerServer(s *grpc.Server, srv TokenManagerServer) {
	s.RegisterService(&_TokenManager_serviceDesc, srv)
}

func _TokenManager_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenManagerServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_manager.TokenManager/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenManagerServer).CreateToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenManager_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenManagerServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_manager.TokenManager/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenManagerServer).ValidateToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenManager_DecrementToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenManagerServer).DecrementToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_manager.TokenManager/DecrementToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenManagerServer).DecrementToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "token_manager.TokenManager",
	HandlerType: (*TokenManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _TokenManager_CreateToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _TokenManager_ValidateToken_Handler,
		},
		{
			MethodName: "DecrementToken",
			Handler:    _TokenManager_DecrementToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token-manager.proto",
}

func init() { proto.RegisterFile("token-manager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xd7, 0x4a, 0x75, 0x7b, 0x73, 0x3d, 0xc4, 0x81, 0xa5, 0x0a, 0x96, 0x9c, 0x8a, 0x60,
	0x06, 0xd3, 0xb3, 0x88, 0x7a, 0xd4, 0x4b, 0x18, 0x5e, 0x25, 0x5b, 0x9f, 0x25, 0x6c, 0x49, 0x66,
	0x96, 0x09, 0xfe, 0x9f, 0xfe, 0x41, 0xb2, 0xa4, 0x55, 0x94, 0xea, 0xad, 0xf9, 0xde, 0xf7, 0xbe,
	0xf7, 0xfd, 0x0a, 0x47, 0xce, 0x2c, 0x51, 0x5f, 0x28, 0xa1, 0x45, 0x8d, 0x96, 0xad, 0xad, 0x71,
	0x86, 0x8c, 0xbc, 0xf8, 0xdc, 0x88, 0xf9, 0x59, 0x6d, 0x4c, 0xbd, 0xc2, 0x89, 0x1f, 0xce, 0xb7,
	0x2f, 0x13, 0x27, 0x15, 0x6e, 0x9c, 0x50, 0xeb, 0xe0, 0xa7, 0x29, 0x1c, 0xce, 0x76, 0x1b, 0x1c,
	0x5f, 0xb7, 0xb8, 0x71, 0x74, 0x09, 0x89, 0x7f, 0x93, 0x14, 0x62, 0x59, 0x65, 0x51, 0x11, 0x95,
	0x03, 0x1e, 0xcb, 0x8a, 0x5c, 0xc1, 0xc1, 0xc2, 0xa2, 0x70, 0x58, 0x65, 0x71, 0x11, 0x95, 0xc3,
	0x69, 0xce, 0x42, 0x36, 0x6b, 0xb3, 0xd9, 0xac, 0xcd, 0xe6, 0xad, 0x95, 0x9c, 0xc2, 0xc0, 0xa2,
	0x12, 0x52, 0x4b, 0x5d, 0x67, 0x7b, 0x45, 0x54, 0x26, 0xfc, 0x5b, 0xa0, 0x0f, 0xd0, 0x7f, 0x12,
	0x2b, 0x59, 0x49, 0xf7, 0x4e, 0xc6, 0x90, 0xbc, 0xed, 0xbe, 0xfd, 0xc9, 0x3e, 0x0f, 0x0f, 0x72,
	0x0e, 0x89, 0x07, 0x6a, 0x6e, 0x8e, 0xd9, 0x0f, 0x3c, 0x16, 0xaa, 0x07, 0xcb, 0xf4, 0x23, 0x6a,
	0x58, 0x1e, 0xc3, 0x94, 0xdc, 0xc2, 0xf0, 0xce, 0xf7, 0x08, 0x44, 0x27, 0x9d, 0xcb, 0x81, 0x3b,
	0xef, 0x4c, 0xa6, 0x3d, 0x72, 0x03, 0x23, 0x5f, 0xf1, 0x2b, 0xa5, 0xd3, 0x98, 0x1f, 0xff, 0x52,
	0x5b, 0x2c, 0xda, 0x23, 0xd7, 0x90, 0xde, 0xe3, 0xc2, 0xa2, 0x42, 0xed, 0xfe, 0x8b, 0xf8, 0xa3,
	0xc1, 0x7c, 0xdf, 0xff, 0xdf, 0xcb, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74, 0x7b, 0xe1, 0x1a,
	0xef, 0x01, 0x00, 0x00,
}
